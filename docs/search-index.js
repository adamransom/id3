var searchIndex = {};
searchIndex["id3"] = {"doc":"","items":[[0,"tag","id3","Types, structs and functions related to reading an ID3v2 tag.",null,null],[3,"Tag","id3::tag","A type representing an ID3v2 tag.",null,null],[4,"Error","","A list specifying the errors that can be encountered when constructing a tag from a reader.",null,null],[13,"Header","","There was an error reading the header",0,null],[13,"Frame","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[6,"Result","","A specialised `Result` type for tag reading operations.",null,null],[11,"default","","",1,{"inputs":[],"output":{"name":"tag"}}],[11,"fmt","","",1,null],[11,"from_reader","","Construct a new tag from a reader.",1,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Gets the header of the tag.",1,null],[0,"header","id3","Types, structs and functions related to reading an ID3v2 tag header.",null,null],[3,"Version","id3::header","A type representing the version of an ID3v2 tag.",null,null],[12,"major","","The major version. Currently only 3 is supported. _It must be less than 255._",2,null],[12,"revision","","The revision version. All revisions are backwards compatible. _It must be less than 255._",2,null],[3,"Header","","A type representing the header of an ID3v2 tag.",null,null],[4,"Error","","A list specifying the errors that can be encountered when constructing a header from a reader.",null,null],[13,"InvalidIdentifier","","The tag is not an ID3v2 tag.",3,null],[13,"InvalidSize","","The size was either 0 or greater than 268435455.",3,null],[13,"InvalidVersion","","Either of the versions were 255.",3,null],[13,"Io","","An error occurred whilst reading the bytes.",3,null],[13,"UnknownFlag","","An unknown header flag was encountered.",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"version"}}],[11,"fmt","","",2,null],[6,"Result","","A specialised `Result` type for header reading operations.",null,null],[11,"default","","",4,{"inputs":[],"output":{"name":"header"}}],[11,"fmt","","",4,null],[11,"from_reader","","Construct a new header from a reader.",4,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"identifier","","Gets the file identifier (currently always &quot;ID3&quot;).",4,null],[11,"version","","Gets the version of the ID3v2 tag.",4,null],[11,"size","","Gets the size of the tag (not including the header or footer). This will always be\ngreater than 0 and less than 268435456.",4,null],[11,"is_unsynchronized","","Gets whether or not unsynchronization is used.",4,null],[11,"has_extended_header","","Gets whether or not the header is followed by an extended header.",4,null],[11,"is_experimental","","Gets whether or not the tag is in an experimental stage.",4,null],[11,"has_footer","","Gets whether or not the tag has a footer.",4,null],[0,"frame","id3","Types, structs and functions related to reading a frame from an ID3v2 tag.",null,null],[3,"Frame","id3::frame","A type representing a frame in an ID3v2 tag.",null,null],[4,"Error","","A list specifying the errors that can be encountered when constructing a frame from a reader.",null,null],[13,"Header","","There was an error reading the header",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"header","","Types, structs and functions related to reading the header of a frame in an ID3v2 tag.",null,null],[3,"Header","id3::frame::header","A type representing the header of a frame in an ID3v2 tag.",null,null],[4,"Error","","A list specifying the errors that can be encountered when constructing a frame header from a reader.",null,null],[13,"InvalidSize","","The size was 0",6,null],[13,"Io","","An error occurred whilst reading the bytes.",6,null],[13,"UnknownFlag","","An unknown flag was encountered.",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[6,"Result","","A specialised `Result` type for frame header reading operations.",null,null],[11,"default","","",7,{"inputs":[],"output":{"name":"header"}}],[11,"fmt","","",7,null],[11,"from_reader","","Construct a new frame header from a reader.",7,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"frame_id","","Gets the frame ID (made out of the characters capital A-Z and 0-9).",7,null],[11,"size","","Gets the size of the frame (not including the header). This will always be greater than 0.",7,null],[11,"should_preserve_tag","","Gets whether or not to preserve the frame if it is unknown and the tag is altered in any\nway. This applies to all kinds of alterations, including adding more padding and reordering the frames.",7,null],[11,"should_preserve_file","","Gets whether or not to preserve the frame if it is unknown and the file, excluding the tag, is altered.",7,null],[11,"is_read_only","","Gets whether or not the contents of the frame is intended to be read only. Changing the contents might\nbreak something, e.g. a signature.",7,null],[11,"is_compressed","","Gets whether or not the frame is compressed.",7,null],[11,"is_encrypted","","Gets whether or not the frame is enrypted.",7,null],[11,"is_grouped","","Gest whether or not this frame belongs in a group with other frames.",7,null],[6,"Result","id3::frame","A specialised `Result` type for frame reading operations.",null,null],[11,"default","","",8,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",8,null],[11,"from_reader","","Construct a new frame from a reader.",8,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"utils","id3","Utilities related to reading ID3v2 tags.",null,null],[5,"synchsafe_to_u32","id3::utils","Converts from &#39;synchsafe&#39; integers to regular integers",null,null]],"paths":[[4,"Error"],[3,"Tag"],[3,"Version"],[4,"Error"],[3,"Header"],[4,"Error"],[4,"Error"],[3,"Header"],[3,"Frame"]]};
initSearch(searchIndex);
